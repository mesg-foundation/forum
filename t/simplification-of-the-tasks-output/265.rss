<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Simplification of the task&#39;s output</title>
    <link>https://forum.mesg.com/t/simplification-of-the-tasks-output/265</link>
    <description>After few months using MESG Core, I realize that create task&#39;s outputs is a bit overcomplicated.
For now we have the following:

One task has one payload of inputs and multiple possible outputs with their own payload.

This is good to have multiple outputs in a function outputs are mostly (if not all the time) something like `success` or `error`.

We could simplify this and just have one output from the task with its own payload. Of course the service could still raise an error.

**PRO:**

- Simplification of the mesg.yml
```
tasks:
  xxx:
    inputs: {...}
    outputs:
      foo: { type: String }
```
- Simplification of the libraries 
```js
// mesg lib catches empty result and do a big try catch on the function
// also now the task don&#39;t have the responsibility to call the the submit result the lib can control only one submit result
mesg.listenTask({
  foo: (inputs: object): object =&gt; {}
})
```

**CON:**
- A huge breaking change as all existing services will be broken
- Need update on the API
- Need update on the libraries

We could have some way to minimize the impact with some conventions. If you are using success/error then we can automatically assign the success as output and catch the error but that will be ugly.</description>
    
    <lastBuildDate>Thu, 30 May 2019 05:15:49 +0000</lastBuildDate>
    <category>Engine</category>
    <atom:link href="https://forum.mesg.com/t/simplification-of-the-tasks-output/265.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Simplification of the task&#39;s output</title>
        <dc:creator><![CDATA[Nicolas]]></dc:creator>
        <description><![CDATA[
            <p>Merged with PR <a href="https://github.com/mesg-foundation/engine/pull/974" rel="nofollow noopener">https://github.com/mesg-foundation/engine/pull/974</a></p>
          <p><a href="https://forum.mesg.com/t/simplification-of-the-tasks-output/265/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/simplification-of-the-tasks-output/265/9</link>
        <pubDate>Thu, 30 May 2019 05:15:49 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-265-9</guid>
        <source url="https://forum.mesg.com/t/simplification-of-the-tasks-output/265.rss">Simplification of the task&#39;s output</source>
      </item>
      <item>
        <title>Simplification of the task&#39;s output</title>
        <dc:creator><![CDATA[Nicolas]]></dc:creator>
        <description><![CDATA[
            <p>To test the features, you can use the service erc20 with branch <code>single-outputs</code>:</p>
<pre><code class="lang-auto">./dev-cli service dev https://github.com/mesg-foundation/service-ethereum-erc20/tarball/single-outputs
</code></pre>
<p>Then to execute a task without error:</p>
<pre><code class="lang-auto">./dev-cli service execute ethereum-erc20 --task name --data contractAddress='0x420167d87d35c3a249b32ef6225872fbd9ab85d2'
</code></pre>
<p>Task with error:</p>
<pre><code class="lang-auto">./dev-cli service execute ethereum-erc20 --task name --data contractAddress='0x420167d87d35c3a249b32ef6225872fbd9ab85d'
</code></pre>
          <p><a href="https://forum.mesg.com/t/simplification-of-the-tasks-output/265/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/simplification-of-the-tasks-output/265/8</link>
        <pubDate>Thu, 23 May 2019 08:53:33 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-265-8</guid>
        <source url="https://forum.mesg.com/t/simplification-of-the-tasks-output/265.rss">Simplification of the task&#39;s output</source>
      </item>
      <item>
        <title>Simplification of the task&#39;s output</title>
        <dc:creator><![CDATA[Nicolas]]></dc:creator>
        <description><![CDATA[
            <p>A new thing came up during the update of the Execution and API package:</p>
<p>With <a href="https://github.com/mesg-foundation/engine/pull/975" rel="nofollow noopener">PR 975</a>, Executions go to state <code>Failed</code> when the service return an error in the <code>SubmitResult</code> request. This is the good behavior.<br>
The problem is Executions also go to state <code>Failed</code> when errors are returned from: <code>json.Unmarshal</code> and <code>exec.Complete</code>.</p>
<ul>
<li>
<span class="chcklst-box checked fa fa-check-square-o fa-fw"></span> This have to be fixed by simply returning the error from those function instead of saving them into Executions.</li>
<li>
<span class="chcklst-box checked fa fa-check-square-o fa-fw"></span> If an error occurs, the execution should not be published on the pubsub system</li>
</ul>
<p>The returned error will be send back to the service as response of the <code>SubmitResult</code> api.</p>
<p>Executions should go to failed state only when the service send an error when calling <code>SubmitResult</code>.</p>
<p>The function <code>SubmitResult</code>, <code>processExecution</code> and <code>saveExecution</code> need to be modified to fix this bad behavior:<br>
<aside class="onebox githubblob">
  <header class="source">
      <a href="https://github.com/mesg-foundation/engine/blob/9581a0216fab48cea14dec11860f0db0aee907f1/api/api.go#L179-L231" target="_blank" rel="nofollow noopener">github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://github.com/mesg-foundation/engine/blob/9581a0216fab48cea14dec11860f0db0aee907f1/api/api.go#L179-L231" target="_blank" rel="nofollow noopener">mesg-foundation/engine/blob/9581a0216fab48cea14dec11860f0db0aee907f1/api/api.go#L179-L231</a></h4>
<pre class="onebox"><code class="lang-go"><ol class="start lines" start="179" style="counter-reset: li-counter 178 ;">
<li>func (a *API) SubmitResult(executionID string, outputs []byte, reterr error) error {</li>
<li>	exec, stateChanged, err := a.processExecution(executionID, outputs, reterr)</li>
<li>	if stateChanged {</li>
<li>		// only publish to listeners when the execution's state changed.</li>
<li>		go a.ps.Pub(exec, executionSubTopic(exec.Service.Hash))</li>
<li>	}</li>
<li>	return err</li>
<li>}</li>
<li>
</li>
<li>// processExecution processes execution and marks it as complated or failed.</li>
<li>func (a *API) processExecution(executionID string, outputData []byte, reterr error) (exec *execution.Execution, stateChanged bool, err error) {</li>
<li>	tx, err := a.execDB.OpenTransaction()</li>
<li>	if err != nil {</li>
<li>		return nil, false, err</li>
<li>	}</li>
<li>
</li>
<li>	exec, err = tx.Find(executionID)</li>
<li>	if err != nil {</li>
<li>		tx.Discard()</li>
<li>		return nil, false, err</li>
</ol></code></pre>

  This file has been truncated. <a href="https://github.com/mesg-foundation/engine/blob/9581a0216fab48cea14dec11860f0db0aee907f1/api/api.go#L179-L231" target="_blank" rel="nofollow noopener">show original</a>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
</p>
          <p><a href="https://forum.mesg.com/t/simplification-of-the-tasks-output/265/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/simplification-of-the-tasks-output/265/7</link>
        <pubDate>Thu, 23 May 2019 08:12:29 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-265-7</guid>
        <source url="https://forum.mesg.com/t/simplification-of-the-tasks-output/265.rss">Simplification of the task&#39;s output</source>
      </item>
      <item>
        <title>Simplification of the task&#39;s output</title>
        <dc:creator><![CDATA[Nicolas]]></dc:creator>
        <description><![CDATA[
            <p>According to the new dev roadmap, this proposal is one of the first to be implemented and is blocking for many other dev on the Engine and CLI.</p>
<p>It will be divided in many small PRs that should not break the Engine or introduce bugs. Most of the PRs are dependant to each other, but some are not, so be careful and don’t merge PRs that don’t have to be dependant!<br>
If some modification break other part of the codebase that are not define by the PR, fix it the easiest way to make it work (default value, hardcode stuff, etc…) because it will be updated by a other PR.</p>
<p><a class="mention" href="/u/krhubert">@krhubert</a> is responsible for the implementation of this proposal, expect for the update of the JS lib.</p>
<p>EDIT 20th May:<br>
All of the following PR should be merged to the branch <code>feature/single-output</code> (instead of <code>dev</code>) so we can still release the <code>dev</code> branch in case there is bug fix!</p>
<h4>
<span class="chcklst-box checked fa fa-check-square-o fa-fw"></span> update importer package <a href="https://github.com/mesg-foundation/engine/pull/963" rel="nofollow noopener">PR #963</a>
</h4>
<ul>
<li>It should read a single output mesg.yml file and transform it to a multiple output service definition (current service definition).<br>
This way, only the importer package have to be updated and <strong>the rest of the codebase doesn’t.</strong>
</li>
<li>the new mesg.yml should look like:</li>
</ul>
<pre><code class="lang-auto">tasks:
  name:
    name: "Token's name"
    description: "Get the name of a ERC20"
    inputs:
      contractAddress:
        name: "Contract address"
        description: "The address of the contract"
        type: String
    outputs:
      name:
        name: "Token's name"
        description: "The name of the ERC20"
        type: String
</code></pre>
<ul>
<li>the outputs in the service definition should be like:</li>
</ul>
<pre><code class="lang-auto">    outputs:
      success:
        name: "Success"
        description: "Output when the task executes successfully"
        data: #the outputs data from the new mesg.yml outputs
          name:
            name: "Token's name"
            description: "The name of the ERC20"
            type: String
      error:
        name: "Error"
        description: "Output when an error occurs"
        data:
          message:
            name: "Message"
            description: "The error message"
            type: String
</code></pre>
<h4>
<span class="chcklst-box checked fa fa-check-square-o fa-fw"></span> change internal structure</h4>
<p>Dependant on the previous PR.</p>
<ul>
<li>
<span class="chcklst-box checked fa fa-check-square fa-fw"></span> Update the <code>Task.Outputs</code> to type <code>[]*Parameter</code> in service package <a href="https://github.com/mesg-foundation/engine/pull/964" rel="nofollow noopener">PR #964</a>
</li>
<li>
<span class="chcklst-box checked fa fa-check-square fa-fw"></span> Remove the <code>Output</code> struct in service package <a href="https://github.com/mesg-foundation/engine/pull/973" rel="nofollow noopener">PR #973</a>
</li>
<li>
<span class="chcklst-box checked fa fa-check-square fa-fw"></span> Update validation logic (most of it should be in <code>service/task.go</code>) <a href="https://github.com/mesg-foundation/engine/pull/973" rel="nofollow noopener">PR #973</a>
</li>
</ul>
<h4>
<span class="chcklst-box checked fa fa-check-square fa-fw"></span> update execution package</h4>
<p>Dependant on the previous PR.</p>
<ul>
<li>
<span class="chcklst-box checked fa fa-check-square-o fa-fw"></span> remove <code>outputKey</code> <a href="https://github.com/mesg-foundation/engine/pull/975" rel="nofollow noopener">PR #975</a>
</li>
<li>
<span class="chcklst-box checked fa fa-check-square-o fa-fw"></span> rename <code>outputData</code> to <code>outputs</code>
</li>
<li>
<span class="chcklst-box checked fa fa-check-square fa-fw"></span> accept error from service when submitting an error</li>
</ul>
<h4>
<span class="chcklst-box checked fa fa-check-square-o fa-fw"></span> update API package</h4>
<ul>
<li>
<span class="chcklst-box checked fa fa-check-square-o fa-fw"></span> Remove <code>outputKey</code> <a href="https://github.com/mesg-foundation/engine/pull/975" rel="nofollow noopener">PR #975</a>
</li>
<li>
<span class="chcklst-box checked fa fa-check-square fa-fw"></span> Add management of <code>error</code> from the service. (in <code>SubmitResult</code> and <code>processExecution</code> I guess).</li>
<li>
<span class="chcklst-box checked fa fa-check-square-o fa-fw"></span> remove <code>outputKey</code> from filter <a href="https://github.com/mesg-foundation/engine/pull/971" rel="nofollow noopener">PR #971</a>
</li>
<li>
<span class="chcklst-box checked fa fa-check-square fa-fw"></span> remove any hack to use service and execution db</li>
</ul>
<h4>
<span class="chcklst-box checked fa fa-check-square fa-fw"></span> update gRPC APIs</h4>
<p>Dependant on the previous PR.</p>
<ul>
<li>
<span class="chcklst-box checked fa fa-check-square fa-fw"></span> Update the service struct in protobuf package</li>
<li>
<span class="chcklst-box checked fa fa-check-square fa-fw"></span> Update the <code>SubmitResultRequest</code> to:</li>
</ul>
<pre><code class="lang-auto">message SubmitResultRequest {
  string executionID = 1;
  string outputData = 3;
  string error = 4;
}
</code></pre>
<p>maybe with an oneOf on <code>outputData</code> and <code>error</code>.</p>
<ul>
<li>
<span class="chcklst-box checked fa fa-check-square fa-fw"></span> Remove <code>outputFilter</code> from <code>ListenResultRequest</code>
</li>
<li>
<span class="chcklst-box checked fa fa-check-square fa-fw"></span> Remove <code>outputKey</code> from <code>ResultData</code>
</li>
</ul>
<h4>
<span class="chcklst-box checked fa fa-check-square fa-fw"></span> update Go libraries</h4>
<p>Dependant on the PR Update APIs.</p>
<ul>
<li>
<span class="chcklst-box checked fa fa-check-square fa-fw"></span> Remove the <code>OutputKey</code>.</li>
<li>
<span class="chcklst-box checked fa fa-check-square fa-fw"></span> Add the error management</li>
</ul>
<h4>
<span class="chcklst-box checked fa fa-check-square fa-fw"></span> update JS libraries <a href="https://github.com/mesg-foundation/mesg-js/pull/90" rel="nofollow noopener">PR #90</a>
</h4>
<p>Dependant on the PR Update APIs.</p>
<ul>
<li>
<span class="chcklst-box checked fa fa-check-square-o fa-fw"></span> Don’t pass outputs callback to the parameter of the task function.<br>
The task function should return an Object that will be JSONed by the lib before send to the Engine.<br>
If the task function throw an error, the lib should catch it and send it to the Engine.<br>
Maybe, the lib could also be compatible with the task function returning a Promise? <a class="mention-group" href="/groups/core">@core</a> what do you think?</li>
</ul>
<h4>
<span class="chcklst-box checked fa fa-check-square fa-fw"></span> update services</h4>
<p>Dependant on the PR Update JS lib for JS service and Go lib for Go service.</p>
<ul>
<li>Update both the mesg.yml and the code of services</li>
</ul>
<h4>
<span class="chcklst-box checked fa fa-check-square fa-fw"></span> update CLI</h4>
<p>Dependant on the PR Update APIs.</p>
<ul>
<li>Update the CLI commands to get rid of all output key related stuff.</li>
</ul>
<p><a href="https://github.com/mesg-foundation/engine/pull/972" rel="nofollow noopener">PR #972</a></p>
          <p><a href="https://forum.mesg.com/t/simplification-of-the-tasks-output/265/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/simplification-of-the-tasks-output/265/6</link>
        <pubDate>Wed, 15 May 2019 10:18:17 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-265-6</guid>
        <source url="https://forum.mesg.com/t/simplification-of-the-tasks-output/265.rss">Simplification of the task&#39;s output</source>
      </item>
      <item>
        <title>Simplification of the task&#39;s output</title>
        <dc:creator><![CDATA[ilgooz]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>I’m not sure to understand. Can you explain more please.</p>
</blockquote>
<p>Nothing important. I say that we have <code>outputX</code>, <code>outputY</code> etc. in the task results and we don’t have the similar thing for events to accept different inputs like <code>inputY</code>, <code>inputY</code> or for task inputs. So, there is no a good reason to keep this pattern just for task outputs, users can implement their own since we support the object data type now.</p>
          <p><a href="https://forum.mesg.com/t/simplification-of-the-tasks-output/265/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/simplification-of-the-tasks-output/265/5</link>
        <pubDate>Mon, 01 Apr 2019 10:28:29 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-265-5</guid>
        <source url="https://forum.mesg.com/t/simplification-of-the-tasks-output/265.rss">Simplification of the task&#39;s output</source>
      </item>
      <item>
        <title>Simplification of the task&#39;s output</title>
        <dc:creator><![CDATA[Nicolas]]></dc:creator>
        <description><![CDATA[
            <aside class="quote group-team" data-post="3" data-topic="265">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.mesg.com/user_avatar/forum.mesg.com/ilgooz/40/46_2.png" class="avatar"> ilgooz:</div>
<blockquote>
<p>Also, we don’t have many input data types in events and task inputs too. So having them for only task outputs doesn’t makes too much sense.</p>
</blockquote>
</aside>
<p>I’m not sure to understand. Can you explain more please.</p>
<aside class="quote group-team" data-post="3" data-topic="265">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.mesg.com/user_avatar/forum.mesg.com/ilgooz/40/46_2.png" class="avatar"> ilgooz:</div>
<blockquote>
<p>One other thing to think about is, we should be able to filter by output types inside the applications. If we remove this feature now, devs will need to do this filtering directly on the data by checking which output presents in the data object.</p>
</blockquote>
</aside>
<p>Yes i agree. But this filtering should be done the same way on both task’s output and events!</p>
          <p><a href="https://forum.mesg.com/t/simplification-of-the-tasks-output/265/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/simplification-of-the-tasks-output/265/4</link>
        <pubDate>Mon, 01 Apr 2019 08:25:33 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-265-4</guid>
        <source url="https://forum.mesg.com/t/simplification-of-the-tasks-output/265.rss">Simplification of the task&#39;s output</source>
      </item>
      <item>
        <title>Simplification of the task&#39;s output</title>
        <dc:creator><![CDATA[ilgooz]]></dc:creator>
        <description><![CDATA[
            <p>I was thinking about this for a while and I agree on this simplification. And since we now support object types in the definition format, it’s still possible for devs create different type of outputs by directly defining them in the output data itself.</p>
<p>One other thing to think about is, we should be able to filter by output types inside the applications. If we remove this feature now, devs will need to do this filtering directly on the data by checking which output presents in the data object.</p>
<p>Also, we don’t have many input data types in events and task inputs too. So having them for only task outputs doesn’t makes too much sense.</p>
          <p><a href="https://forum.mesg.com/t/simplification-of-the-tasks-output/265/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/simplification-of-the-tasks-output/265/3</link>
        <pubDate>Mon, 01 Apr 2019 06:12:27 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-265-3</guid>
        <source url="https://forum.mesg.com/t/simplification-of-the-tasks-output/265.rss">Simplification of the task&#39;s output</source>
      </item>
      <item>
        <title>Simplification of the task&#39;s output</title>
        <dc:creator><![CDATA[Nicolas]]></dc:creator>
        <description><![CDATA[
            <p>I totally support this simplification even if it breaks every services!</p>
<p>I would like to add also a PRO argument:</p>
<p>The states of execution will also be simplified and more precise.<br>
Currently, there is a error state only for error occurring inside the Core.<br>
If the error output is managed by the Core, then the Core could set the execution’s state to error as well. It will be a very nice feature to allow a better retry system on execution.</p>
<p>As <a class="mention" href="/u/anthony">@Anthony</a> said, the libs should catches error throwed or returned by the task function.<br>
But gRPC api must integrate the error.<br>
The current message containing the result of an execution is:</p>
<pre><code class="lang-auto">message SubmitResultRequest {
  string executionID = 1;
  string outputKey = 2;
  string outputData = 3;
}
</code></pre>
<p>I suggest to transform it to something like:</p>
<pre><code class="lang-auto">message SubmitResultRequest {
  string executionID = 1;
  oneof output {
    string outputData = 3;
    string error = 4;
  }
}
</code></pre>
          <p><a href="https://forum.mesg.com/t/simplification-of-the-tasks-output/265/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/simplification-of-the-tasks-output/265/2</link>
        <pubDate>Mon, 01 Apr 2019 05:15:35 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-265-2</guid>
        <source url="https://forum.mesg.com/t/simplification-of-the-tasks-output/265.rss">Simplification of the task&#39;s output</source>
      </item>
      <item>
        <title>Simplification of the task&#39;s output</title>
        <dc:creator><![CDATA[Anthony]]></dc:creator>
        <description><![CDATA[
            <p>After few months using MESG Core, I realize that create task’s outputs is a bit overcomplicated.<br>
For now we have the following:</p>
<p>One task has one payload of inputs and multiple possible outputs with their own payload.</p>
<p>This is good to have multiple outputs in a function outputs are mostly (if not all the time) something like <code>success</code> or <code>error</code>.</p>
<p>We could simplify this and just have one output from the task with its own payload. Of course the service could still raise an error.</p>
<p><strong>PRO:</strong></p>
<ul>
<li>Simplification of the mesg.yml</li>
</ul>
<pre><code class="lang-auto">tasks:
  xxx:
    inputs: {...}
    outputs:
      foo: { type: String }
</code></pre>
<ul>
<li>Simplification of the libraries</li>
</ul>
<pre><code class="lang-auto">// mesg lib catches empty result and do a big try catch on the function
// also now the task don't have the responsibility to call the the submit result the lib can control only one submit result
mesg.listenTask({
  foo: (inputs: object): object =&gt; {}
})
</code></pre>
<p><strong>CON:</strong></p>
<ul>
<li>A huge breaking change as all existing services will be broken</li>
<li>Need update on the API</li>
<li>Need update on the libraries</li>
</ul>
<p>We could have some way to minimize the impact with some conventions. If you are using success/error then we can automatically assign the success as output and catch the error but that will be ugly.</p>
          <p><a href="https://forum.mesg.com/t/simplification-of-the-tasks-output/265/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/simplification-of-the-tasks-output/265/1</link>
        <pubDate>Thu, 28 Mar 2019 11:29:59 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-265-1</guid>
        <source url="https://forum.mesg.com/t/simplification-of-the-tasks-output/265.rss">Simplification of the task&#39;s output</source>
      </item>
  </channel>
</rss>
