<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Mesg-js: implement &#39;ready&#39; state for streams</title>
    <link>https://forum.mesg.com/t/mesg-js-implement-ready-state-for-streams/179</link>
    <description>related with:
* https://github.com/mesg-foundation/mesg-js/pull/49
* https://github.com/mesg-foundation/mesg-js/pull/47

With the new high level APIs of application and service clients we don&#39;t have a way of notify users about if the stream is ready for serving `task/event/result` data.

In the example below, we never know if the stream is ready to serve _result_ data. We can only be sure of that when the first result received. But in order to provide a more consistent API and implement new _ack_ feature, we need to know that stream is ready to serve data so we can execute a task afterwards.
```ts
const stream = app.listenResult({serviceID: &quot;3989b1e17bd5fc4b7fca846141cb8dc4efa6fc64&quot;})
stream.on(&#39;result&#39;, (e) =&gt; { console.log(e) })
stream.on(&#39;end&#39;, (e) =&gt; { console.log(e) })
```

**I propose two solutions for this:**

1- introduce &#39;ready&#39; event:
```ts
// note that with this implementation, since we return stream directly with the listenResult() it&#39;s possible to cancel the stream easily/anytime by calling stream.cancel()
// with the other option stream cancelation only possible after stream is actually started(ready).
const stream = app.listenResult({serviceID: &quot;3989b1e17bd5fc4b7fca846141cb8dc4efa6fc64&quot;})
stream.on(&#39;ready&#39;, () =&gt; {  })
stream.on(&#39;result&#39;, (e) =&gt; { console.log(e) })
stream.on(&#39;end&#39;, (e) =&gt; { console.log(e) })
```

2- or we can accept a callback and inject the stream to it when it&#39;s ready.
```ts
app.listenResult({serviceID: &quot;3989b1e17bd5fc4b7fca846141cb8dc4efa6fc64&quot;}, (stream) =&gt; {
  stream.on(&#39;result&#39;, (e) =&gt; { console.log(e) })
  stream.on(&#39;end&#39;, (e) =&gt; { console.log(e) })
})
```

[poll type=regular results=always public=true]
* event
* callback
[/poll]</description>
    
    <lastBuildDate>Tue, 08 Jan 2019 13:06:41 +0000</lastBuildDate>
    <category>Library JS</category>
    <atom:link href="https://forum.mesg.com/t/mesg-js-implement-ready-state-for-streams/179.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Mesg-js: implement &#39;ready&#39; state for streams</title>
        <dc:creator><![CDATA[ilgooz]]></dc:creator>
        <description><![CDATA[
            <p>We decided to change public APIs so this proposal is no longer needed.</p>
<p>However, I implemented the event version with this <a href="https://github.com/mesg-foundation/mesg-js/pull/47/commits/2798dbe2e8888ba644c361540d5bc9d37e3c057f" rel="nofollow noopener">commit</a>. We’ll keep this commit and other updated version of high level APIs in another branch called <em>generated-and-high-level-apis</em> for future attention.</p>
          <p><a href="https://forum.mesg.com/t/mesg-js-implement-ready-state-for-streams/179/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/mesg-js-implement-ready-state-for-streams/179/2</link>
        <pubDate>Tue, 08 Jan 2019 13:06:41 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-179-2</guid>
        <source url="https://forum.mesg.com/t/mesg-js-implement-ready-state-for-streams/179.rss">Mesg-js: implement &#39;ready&#39; state for streams</source>
      </item>
      <item>
        <title>Mesg-js: implement &#39;ready&#39; state for streams</title>
        <dc:creator><![CDATA[ilgooz]]></dc:creator>
        <description><![CDATA[
            <p>related with:</p>
<ul>
<li><a href="https://github.com/mesg-foundation/mesg-js/pull/49" rel="nofollow noopener">https://github.com/mesg-foundation/mesg-js/pull/49</a></li>
<li><a href="https://github.com/mesg-foundation/mesg-js/pull/47" rel="nofollow noopener">https://github.com/mesg-foundation/mesg-js/pull/47</a></li>
</ul>
<p>With the new high level APIs of application and service clients we don’t have a way of notify users about if the stream is ready for serving <code>task/event/result</code> data.</p>
<p>In the example below, we never know if the stream is ready to serve <em>result</em> data. We can only be sure of that when the first result received. But in order to provide a more consistent API and implement new <em>ack</em> feature, we need to know that stream is ready to serve data so we can execute a task afterwards.</p>
<pre><code class="lang-auto">const stream = app.listenResult({serviceID: "3989b1e17bd5fc4b7fca846141cb8dc4efa6fc64"})
stream.on('result', (e) =&gt; { console.log(e) })
stream.on('end', (e) =&gt; { console.log(e) })
</code></pre>
<p><strong>I propose two solutions for this:</strong></p>
<p>1- introduce ‘ready’ event:</p>
<pre><code class="lang-auto">// note that with this implementation, since we return stream directly with the listenResult() it's possible to cancel the stream easily/anytime by calling stream.cancel()
// with the other option stream cancelation only possible after stream is actually started(ready).
const stream = app.listenResult({serviceID: "3989b1e17bd5fc4b7fca846141cb8dc4efa6fc64"})
stream.on('ready', () =&gt; {  })
stream.on('result', (e) =&gt; { console.log(e) })
stream.on('end', (e) =&gt; { console.log(e) })
</code></pre>
<p>2- or we can accept a callback and inject the stream to it when it’s ready.</p>
<pre><code class="lang-auto">app.listenResult({serviceID: "3989b1e17bd5fc4b7fca846141cb8dc4efa6fc64"}, (stream) =&gt; {
  stream.on('result', (e) =&gt; { console.log(e) })
  stream.on('end', (e) =&gt; { console.log(e) })
})
</code></pre>
<div class="poll" data-poll-status="open" data-poll-public="true" data-poll-results="always" data-poll-type="regular" data-poll-name="poll">
<div>
<div class="poll-container">
<ul>
<li data-poll-option-id="09fba58a5296c7db22bfac271abe7f7d">event</li>
<li data-poll-option-id="6a1d6f88839753646a4125d38cbde7de">callback</li>
</ul>
</div>
<div class="poll-info">
<p>
<span class="info-number">0</span>
<span class="info-label">voters</span>
</p>
</div>
</div>
</div>
          <p><a href="https://forum.mesg.com/t/mesg-js-implement-ready-state-for-streams/179/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/mesg-js-implement-ready-state-for-streams/179/1</link>
        <pubDate>Tue, 08 Jan 2019 08:45:51 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-179-1</guid>
        <source url="https://forum.mesg.com/t/mesg-js-implement-ready-state-for-streams/179.rss">Mesg-js: implement &#39;ready&#39; state for streams</source>
      </item>
  </channel>
</rss>
