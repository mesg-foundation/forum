<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Configuring Services with Deploy-Time or Run-Time Arguments</title>
    <link>https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124</link>
    <description>There are two types of configurations related to configuring services.

1- Configuring service tasks/events, it&#39;s public ports, data volumes etc. from the _mesg.yml_. (we have this feature).

2- Configuring service&#39;s program with its own runtime cli flags. (we do this within the _Dockerfile_ of service while running it.)

Currently, these two types of configurations can be only done by changing the source code of services. And we don&#39;t support ability of somehow setting cli flags of service&#39;s program within the _mesg.yml_ file. Since _mesg.yml_ is the place where we describe and configure services, I think, we should also support configuring runtime of service&#39;s program inside of it too.

Purpose if this proposal is to discuss both to support configuring services dynamically without changing their source code by using some kind of runtime or build-time arguments for MESG services. If we have this feature, as a second, we can support providing configurations to runtime of service&#39;s program, this way program can be dynamically configured as well.

_Real world case about why this is needed:_

As a user, let&#39;s say that I have a workflow file and I want to use [service-http-server](https://github.com/ilgooz/service-http-server) for serving a _vuejs app_ and a _rest api_ but from different ports. To do that, _service-http-server_ should be configurable to set a port address without a need of changing its source code because, I don&#39;t want to fork it and create two different branches to setup different ports. I want to have the full power of reusable services by passing configurations dynamically. 

So, for this case, I need to be able to both configure [this part in the yml](https://github.com/ilgooz/service-http-server/blob/1cc53b0/mesg.yml#L61) file and [this flag in the Dockerfile](https://github.com/ilgooz/service-http-server/blob/975b713/Dockerfile#L5) dynamically. 

_Check the sample mesg.yml and Dockerfile below for see this proposal in actual code:_
_- Note that, to configure service&#39;s program dynamically from the mesg.yml, I followed the pattern of using build args of Docker. Every arg provided while deploying/starting MESG services also directly mapped to Docker&#39;s build time args_

_command:_
```
$ mesg-core service deploy --arg serverAddr=2300 https://github.com/ilgooz/service-http-server
// outputs a SERVICE_ID

// or

$ mesg-core service start --arg serverAddr=2300 SERVICE_ID
// outputs an ANOTHER_SERVICE_ID
```

_mesg.yml:_
```go
...
name: ...
description: ...
env:
  # we can also support env vars that will be accessed by service&#39;s program on runtime
  # as next to configuring service&#39;s program with Docker&#39;s build time args.
  AN_ENV_VAR: 123
configuration:
  ports:
    - $serverAddr
...
```

_Dockerfile:_
```go
CMD website --serverAddr $serverAddr
```

We discussed on Discord and kinda agreed on providing runtime arguments to MESG services with the _service start/deploy_ command and they can be accessed with _$_ sign in the _yml_ file. Every argument should be also mapped to Docker&#39;s build time arguments. But of course, every change on args **must** cause service to get a **different service id**.

By having this configuration features, we can also support giving configurations for services in the workflow files easily like this:
_sample workflow.yml_:
```go
...
services:
  website:
    id: https://github.com/ilgooz/service-http-server/
    args:
      serverAddr: 2300

  restapi:
    repo: https://github.com/ilgooz/service-http-server/
    args:
      serverAddr: 3300

when:
  ...
```</description>
    
    <lastBuildDate>Thu, 27 Dec 2018 11:46:03 +0000</lastBuildDate>
    <category>Engine</category>
    <atom:link href="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Configuring Services with Deploy-Time or Run-Time Arguments</title>
        <dc:creator><![CDATA[Nicolas]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/18">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/18</link>
        <pubDate>Sat, 05 Jan 2019 09:36:10 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-124-18</guid>
        <source url="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124.rss">Configuring Services with Deploy-Time or Run-Time Arguments</source>
      </item>
      <item>
        <title>Configuring Services with Deploy-Time or Run-Time Arguments</title>
        <dc:creator><![CDATA[Nicolas]]></dc:creator>
        <description><![CDATA[
            <p>Topic solved by PR <a href="https://github.com/mesg-foundation/core/pull/641" rel="nofollow noopener">https://github.com/mesg-foundation/core/pull/641</a></p>
          <p><a href="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/17">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/17</link>
        <pubDate>Thu, 27 Dec 2018 11:46:03 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-124-17</guid>
        <source url="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124.rss">Configuring Services with Deploy-Time or Run-Time Arguments</source>
      </item>
      <item>
        <title>Configuring Services with Deploy-Time or Run-Time Arguments</title>
        <dc:creator><![CDATA[Nicolas]]></dc:creator>
        <description><![CDATA[
            <aside class="quote group-team" data-post="15" data-topic="124">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.mesg.com/user_avatar/forum.mesg.com/ilgooz/40/46_1.png" class="avatar"> ilgooz:</div>
<blockquote>
<ul>
<li>env are accept in dependencies in mesg.yml but not passed to dependencies’ container</li>
</ul>
</blockquote>
</aside>
<p>Done in <a href="https://github.com/mesg-foundation/core/pull/666" rel="nofollow noopener">https://github.com/mesg-foundation/core/pull/666</a></p>
          <p><a href="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/16">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/16</link>
        <pubDate>Thu, 27 Dec 2018 10:57:27 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-124-16</guid>
        <source url="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124.rss">Configuring Services with Deploy-Time or Run-Time Arguments</source>
      </item>
      <item>
        <title>Configuring Services with Deploy-Time or Run-Time Arguments</title>
        <dc:creator><![CDATA[ilgooz]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="/u/nicolas">@Nicolas</a> <a href="https://github.com/mesg-foundation/core/pull/641#issuecomment-448915107" rel="nofollow noopener">suggested</a> on the related PR:<br>
To do in other PRs:</p>
<ul>
<li>
<span class="chcklst-box checked fa fa-check-square-o fa-fw"></span> env are accept in dependencies in mesg.yml but not passed to dependencies’ container -&gt; Done in PR <a href="https://github.com/mesg-foundation/core/pull/666" rel="nofollow noopener">https://github.com/mesg-foundation/core/pull/666</a>
</li>
<li>
<span class="chcklst-box checked fa fa-check-square-o fa-fw"></span> env in mesg.yml are a array of string. it could be good to also accept an array of object -&gt; Move to <a href="https://forum.mesg.com/t/env-definition-as-object/162" class="inline-onebox">Env definition as object</a>
</li>
</ul>
          <p><a href="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/15</link>
        <pubDate>Thu, 20 Dec 2018 10:16:05 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-124-15</guid>
        <source url="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124.rss">Configuring Services with Deploy-Time or Run-Time Arguments</source>
      </item>
      <item>
        <title>Configuring Services with Deploy-Time or Run-Time Arguments</title>
        <dc:creator><![CDATA[Nicolas]]></dc:creator>
        <description><![CDATA[
            <p>Very good initiative <img src="https://forum.mesg.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"> <img src="https://forum.mesg.com/images/emoji/twitter/+1.png?v=6" title=":+1:" class="emoji" alt=":+1:"></p>
          <p><a href="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/14</link>
        <pubDate>Thu, 20 Dec 2018 06:08:25 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-124-14</guid>
        <source url="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124.rss">Configuring Services with Deploy-Time or Run-Time Arguments</source>
      </item>
      <item>
        <title>Configuring Services with Deploy-Time or Run-Time Arguments</title>
        <dc:creator><![CDATA[ilgooz]]></dc:creator>
        <description><![CDATA[
            <p>I’ve created a tutorial (in draft) about this feature, we can publish it after a new release! <a href="https://medium.com/@ilgooz/configuring-mesg-services-in-the-deploy-time-b61b6d56eb2f" rel="nofollow noopener">https://medium.com/@ilgooz/configuring-mesg-services-in-the-deploy-time-b61b6d56eb2f</a></p>
          <p><a href="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/13</link>
        <pubDate>Wed, 19 Dec 2018 14:13:33 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-124-13</guid>
        <source url="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124.rss">Configuring Services with Deploy-Time or Run-Time Arguments</source>
      </item>
      <item>
        <title>Configuring Services with Deploy-Time or Run-Time Arguments</title>
        <dc:creator><![CDATA[Nicolas]]></dc:creator>
        <description><![CDATA[
            <p>As said by <a class="mention" href="/u/anthony">@Anthony</a>, we could start by a very simple definition of env in the mesg.yml, and in a future PR, improving the system by allowing both key=value and full struct (for advance use) in the mesg.yml.</p>
<p><a class="mention" href="/u/krhubert">@krhubert</a> what do you think?</p>
          <p><a href="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/12</link>
        <pubDate>Fri, 14 Dec 2018 10:16:03 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-124-12</guid>
        <source url="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124.rss">Configuring Services with Deploy-Time or Run-Time Arguments</source>
      </item>
      <item>
        <title>Configuring Services with Deploy-Time or Run-Time Arguments</title>
        <dc:creator><![CDATA[Anthony]]></dc:creator>
        <description><![CDATA[
            <p>I suggested in the pull request something more traditional<br>
<aside class="onebox githubpullrequest">
  <header class="source">
      <a href="https://github.com/mesg-foundation/core/pull/641#issuecomment-447021549" target="_blank" rel="nofollow noopener">github.com/mesg-foundation/core</a>
  </header>
  <article class="onebox-body">
      <a href="https://github.com/krhubert" target="_blank" rel="nofollow noopener">
    <img alt="krhubert" src="https://forum.mesg.com/uploads/default/original/1X/fbad366fb822efa0b76a87890c7ac7261cda9346.jpeg" class="thumbnail onebox-avatar" width="90" height="90">
  </a>

<h4>
  <a href="https://github.com/mesg-foundation/core/pull/641" target="_blank" rel="nofollow noopener">Configure services with envs</a>
</h4>

<div class="date">
  by <a href="https://github.com/krhubert" target="_blank" rel="nofollow noopener">krhubert</a>
  on <a href="https://github.com/mesg-foundation/core/pull/641" target="_blank" rel="nofollow noopener">03:12PM - 12 Dec 18 UTC</a>
</div>

<div class="github-commit-stats">
  <strong>14 commits</strong>
  changed <strong>36 files</strong>
  with <strong>498 additions</strong>
  and <strong>262 deletions</strong>.
</div>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
</p>
<pre><code class="lang-auto">env:
  - XXX=YYY
</code></pre>
<p>docker compose style <a href="https://docs.docker.com/compose/environment-variables/" rel="nofollow noopener">https://docs.docker.com/compose/environment-variables/</a></p>
<p>This is kind of traditional and also really easy to use a file based on that and include variables and stuff like that.</p>
          <p><a href="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/11</link>
        <pubDate>Fri, 14 Dec 2018 04:34:11 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-124-11</guid>
        <source url="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124.rss">Configuring Services with Deploy-Time or Run-Time Arguments</source>
      </item>
      <item>
        <title>Configuring Services with Deploy-Time or Run-Time Arguments</title>
        <dc:creator><![CDATA[Nicolas]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/10</link>
        <pubDate>Tue, 11 Dec 2018 11:24:36 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-124-10</guid>
        <source url="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124.rss">Configuring Services with Deploy-Time or Run-Time Arguments</source>
      </item>
      <item>
        <title>Configuring Services with Deploy-Time or Run-Time Arguments</title>
        <dc:creator><![CDATA[Nicolas]]></dc:creator>
        <description><![CDATA[
            <h1>Summary of first iteration</h1>
<p>Allow user to pass user configuration to the service.</p>
<h2>Update mesg.yml</h2>
<p>Add <code>environment</code> to <code>configuration</code> in <code>mesg.yml</code>. (So environment will also be available in dependencies).</p>
<pre><code class="lang-auto">configuration:
  env:
    - key: AN_ENV_VAR_FOR_SERVICE
      name: "Set the endpoint of blablabla...." // user friendly name. Optional
      value: 123 // Developer defined value, eg: default value.
dependencies:
  depA:
    env:
      - key: AN_OTHER_ENV_VAR_FOR_DEP_A
        name: "Set the endpoint of blablabla...." // user friendly name. Optional
        value: 123 // Developer defined value, eg: default value.
</code></pre>
<p>Env can be a new struct (it’s too different from the <code>parameter</code> struct).</p>
<h2>Pass flag to deploy command</h2>
<p>Allow user to pass <code>env</code> flag to override environment (only for configuration, <strong>NOT for dependencies</strong>).</p>
<pre><code class="lang-auto">mesg-core service deploy SERVER_URL/PATH --env AN_ENV_VAR=yolo
</code></pre>
<h2>Save env variable</h2>
<p>The modification of ENV must change the service’s hash. So adding them to the service structure will at the same time both save them in the db and change the service hash.<br>
Also, I think it’s best to not override the value in the <code>configuration.env</code> struct. <a class="mention" href="/u/krhubert">@krhubert</a> implement it by adding a <code>EnvValue</code> in the dependency struct (like the <code>env</code> def). I’m fine with this.</p>
<h2>Inject it in the service’s container</h2>
<p>Inject the env as env in the container. Make sure that “MESG” env override developer env.<br>
Only the service dependency should accept the user’s env, not any other dependencies.</p>
          <p><a href="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/9</link>
        <pubDate>Tue, 11 Dec 2018 10:25:52 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-124-9</guid>
        <source url="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124.rss">Configuring Services with Deploy-Time or Run-Time Arguments</source>
      </item>
      <item>
        <title>Configuring Services with Deploy-Time or Run-Time Arguments</title>
        <dc:creator><![CDATA[Anthony]]></dc:creator>
        <description><![CDATA[
            <p>Just got some random thoughts around that.</p>
<p>I like the idea of having having multiple <code>mesg.yml</code>, I would suggest to get some inspiration from docker-compose where by default it’s <code>docker-compose.yml</code> but you can <strong>override</strong> by giving another file. So for the case of the service ethereum (which is one really complex one) we can have a “basic” mesg.yml file and one just for the dependencies and running it like that<br>
<code>mesg-core service deploy --file mesg.yml --file testnet.yml ...</code></p>
<p>Also passing arguments is a good solution, for smaller needs, and this would be similar to the docker build arguments (and could use the docker build arguments) and would be used like that<br>
<code>mesg-core service deploy --args argX=1234 ...</code><br>
This argument would be passed to the docker build and also replaced in the mesg.yml.</p>
<p>Of course this can be combined with<br>
<code>mesg-core service deploy --file mesg.yml --file testnet.yml --args privateKey=xxx ...</code></p>
<p>I think args are more important because they can cover way more features (eg: the image for the ethereum node or the volume etc…) so this might be enough and also the good point is that these arguments can also be injected in the docker build.</p>
          <p><a href="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/8</link>
        <pubDate>Thu, 06 Dec 2018 16:57:55 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-124-8</guid>
        <source url="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124.rss">Configuring Services with Deploy-Time or Run-Time Arguments</source>
      </item>
      <item>
        <title>Configuring Services with Deploy-Time or Run-Time Arguments</title>
        <dc:creator><![CDATA[ilgooz]]></dc:creator>
        <description><![CDATA[
            <p>I think, having a template system built-in introduces too much complexity and final yaml file becomes to invalid which causes to a poor UX when yaml editors are used.</p>
<p>But users still can use a template engine to dynamically create <em>mesg.yml</em> files depending on their logic. And they can have multiple yml files in their repo with different names. We just need to provide the possibility of accepting custom names for yml files with a flag in the <em>deploy</em> command. e.g.:</p>
<pre><code class="lang-auto">mesg-core service deploy --definition mesg-dev.yml /path/to/service
</code></pre>
          <p><a href="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/7</link>
        <pubDate>Tue, 27 Nov 2018 11:23:04 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-124-7</guid>
        <source url="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124.rss">Configuring Services with Deploy-Time or Run-Time Arguments</source>
      </item>
      <item>
        <title>Configuring Services with Deploy-Time or Run-Time Arguments</title>
        <dc:creator><![CDATA[krhubert]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>2- Configuring service’s program with its own runtime cli flags. (we do this within the  <em>Dockerfile</em>  of service while running it.)</p>
</blockquote>
<p>I don’t like it as cli is not user-friendly for complex types like hash map etc</p>
<blockquote>
<p>1- Configuring service tasks/events, it’s public ports, data volumes etc. from the  <em>mesg.yml</em> . (we have this feature).</p>
</blockquote>
<p>I like it more but it will be hard to manage,even with template system.</p>
<p>Imagine someone has configs for <code>dev</code>, <code>staging</code>, <code>preprod</code>, <code>prod</code>, <code>test</code> and it rather standard environment and there are more complex ones. In that case, mesg.yml will become one big template. Also sometimes one doesn’t want to show prod config for devs…</p>
<p>So I like the idea of having config separated from mesg.yml. In that case you create for example<br>
config.dev, config.staging, config.prod, config etc…</p>
          <p><a href="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/6</link>
        <pubDate>Tue, 27 Nov 2018 08:01:37 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-124-6</guid>
        <source url="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124.rss">Configuring Services with Deploy-Time or Run-Time Arguments</source>
      </item>
      <item>
        <title>Configuring Services with Deploy-Time or Run-Time Arguments</title>
        <dc:creator><![CDATA[Nicolas]]></dc:creator>
        <description><![CDATA[
            <p>Also, if the <code>mesg.yml</code> is compatible with a template system, we could imagine future advance configuration of a service.<br>
For example, the <a href="https://github.com/mesg-foundation/service-ethereum">service-ethereum</a> has 2 version of the <code>mesg.yml</code>:<br>
Master’s version:<br>
<aside class="onebox githubblob">
  <header class="source">
      <a href="https://github.com/mesg-foundation/service-ethereum/blob/master/mesg.yml" target="_blank">github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://github.com/mesg-foundation/service-ethereum/blob/master/mesg.yml" target="_blank">mesg-foundation/service-ethereum/blob/master/mesg.yml</a></h4>
<pre><code class="lang-yml">name: "Ethereum"
description: "Ethereum Service to interact with any Smart Contract"
tasks:
  executeSmartContractMethod:
    name: "Execute a Smart Contract Method"
    description: "This task executes a method on any Smart Contract"
    inputs:
      methodAbi: &amp;methodAbiParam
        name: "Method ABI"
        description: "The ABI of the method to execute. Only pass the ABI of the method and NOT all the Smart Contract's ABI."
        type: Object
      inputs: &amp;inputsParam
        name: "Inputs"
        description: "The inputs to use during the execution of the method. Pass an Object with parameter's name as key and parameter's value as value."
        type: Object
      contractAddress: &amp;contractAddressParam
        name: "Contract address"
        description: "The address of the contract"
        type: String
      privateKey: &amp;privateKeyInput
</code></pre>

  This file has been truncated. <a href="https://github.com/mesg-foundation/service-ethereum/blob/master/mesg.yml" target="_blank">show original</a>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<br>
And, RSK version:<br>
<aside class="onebox githubblob">
  <header class="source">
      <a href="https://github.com/mesg-foundation/service-ethereum/blob/rsk/regtest/mesg.yml" target="_blank">github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://github.com/mesg-foundation/service-ethereum/blob/rsk/regtest/mesg.yml" target="_blank">mesg-foundation/service-ethereum/blob/rsk/regtest/mesg.yml</a></h4>
<pre><code class="lang-yml">name: "Ethereum"
description: "Ethereum Service to interact with any Smart Contract"
dependencies:
# the dependency has to build manually:
# open a terminal in service-ethereum/rsk
# execute: docker build -t regtest -f Dockerfile.RegTest .
  rskclient:
    image: regtest
    volumes:
      - /var/lib/rsk
    ports:
      - 4444:4444
      - 30305:30305
tasks:
  executeSmartContractMethod:
    name: "Execute a Smart Contract Method"
    description: "This task executes a method on any Smart Contract"
    inputs:
      methodAbi: &amp;methodAbiParam
        name: "Method ABI"
</code></pre>

  This file has been truncated. <a href="https://github.com/mesg-foundation/service-ethereum/blob/rsk/regtest/mesg.yml" target="_blank">show original</a>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
</p>
<p>As you see, the block dependencies is only present in the RSK version. If we have a template system, we could have only 1 version of the <code>mesg.yml</code> that render different version based on config:</p>
<pre><code class="lang-auto">name: "Ethereum"
description: "Ethereum Service to interact with any Smart Contract"
dependencies:
{{ if myVariable == "rsk" }}
  rskclient:
    image: regtest
    volumes:
      - /var/lib/rsk
    ports:
      - 4444:4444
      - 30305:30305
{{ endif }}
</code></pre>
<p>Again, this is not something to implement in priority, let’s just keep it in mind what a template system could do on <code>mesg.yml</code>.</p>
          <p><a href="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/5</link>
        <pubDate>Tue, 27 Nov 2018 06:02:45 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-124-5</guid>
        <source url="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124.rss">Configuring Services with Deploy-Time or Run-Time Arguments</source>
      </item>
      <item>
        <title>Configuring Services with Deploy-Time or Run-Time Arguments</title>
        <dc:creator><![CDATA[Nicolas]]></dc:creator>
        <description><![CDATA[
            <aside class="quote group-team" data-post="2" data-topic="124">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.mesg.com/user_avatar/forum.mesg.com/anthony/40/7_1.png" class="avatar"> Anthony:</div>
<blockquote>
<p>I really like the idea, just to have something else to thing about why not using the structure of the yaml as key.<br>
In you case it would be something like</p>
<pre><code class="lang-auto">mesg-core service deploy --configuration.ports.0 2300 https://....
</code></pre>
</blockquote>
</aside>
<p>I don’t think it’s a good idea.</p>
<p>We don’t want users to be able to re-configure everything in the <code>mesg.yml</code>. I think it will allow malicious use of a service and it doesn’t solve the problem of passing configuration to the service’s application.<br>
If users want to change so much a mesg.yml, they can download the source and change it themself.</p>
<p>But I suggest to allow basic override of some variables, like the future <code>alias</code>, maybe even <code>name</code> and <code>description</code>, but that’s it. Only “cosmetic” stuff should be customizable without the approval of the service developer.</p>
          <p><a href="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/4</link>
        <pubDate>Tue, 27 Nov 2018 05:53:51 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-124-4</guid>
        <source url="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124.rss">Configuring Services with Deploy-Time or Run-Time Arguments</source>
      </item>
      <item>
        <title>Configuring Services with Deploy-Time or Run-Time Arguments</title>
        <dc:creator><![CDATA[Nicolas]]></dc:creator>
        <description><![CDATA[
            <p>Good summary of the problem <a class="mention" href="/u/ilgooz">@ilgooz</a> <img src="https://forum.mesg.com/images/emoji/twitter/+1.png?v=6" title=":+1:" class="emoji" alt=":+1:"></p>
<p>My suggestion on this system are:</p>
<ul>
<li>Add a new key to the mesg.yml to explicitly define the name and default value of the configuration that the service is compatible with. Because the key <code>configuration</code> is already used for configuring the service’s container, with need another name (or change it to <code>container</code>?). It could be “variable”, “userConfig”, “argument” (suggestion accepted <img src="https://forum.mesg.com/images/emoji/twitter/wink.png?v=6" title=":wink:" class="emoji" alt=":wink:"> ).<br>
It should look like:</li>
</ul>
<pre><code class="lang-auto">name: ...
description: ...
variable:
  myVariable: 123
# variable name: default value
</code></pre>
<p>With this knowledge, the core could check that the a user’s config is defined by the service.</p>
<ul>
<li>Make mesg.yml configurable by using yaml variable if possible, otherwise we can use a template system like <code>$variable</code> (<a class="mention" href="/u/ilgooz">@ilgooz</a> suggestion) or <code>{{variable}}</code>.</li>
</ul>
<pre><code class="lang-auto">configuration:
  ports:
    - *myVariable
    - $myVariable
    - {{myVariable}}
</code></pre>
<ul>
<li>
<p>Inject config as env variable in the service (or use Docker’s <a href="https://docs.docker.com/engine/swarm/secrets/#about-secrets">secret</a> or <a href="https://docs.docker.com/engine/swarm/configs/">config</a>) so the service’s app can also access the config</p>
</li>
<li>
<p><strong>Do not inject config in Dockerfile</strong>. The Dockerfile should be as generic as possible.</p>
</li>
<li>
<p>Accept user’s config <strong>only</strong> in the deploy command. As the user’s config must change the service ID, deploy command is the right place.</p>
</li>
</ul>
          <p><a href="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/3</link>
        <pubDate>Tue, 27 Nov 2018 05:47:11 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-124-3</guid>
        <source url="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124.rss">Configuring Services with Deploy-Time or Run-Time Arguments</source>
      </item>
      <item>
        <title>Configuring Services with Deploy-Time or Run-Time Arguments</title>
        <dc:creator><![CDATA[Anthony]]></dc:creator>
        <description><![CDATA[
            <p>I really like the idea, just to have something else to thing about why not using the structure of the yaml as key.<br>
In you case it would be something like</p>
<pre><code class="lang-auto">mesg-core service deploy --configuration.ports.0 2300 https://....
</code></pre>
<p>We could like that override any configuration of a service and not only the one that the developer allowed and because it will be a new hash we shouldn’t have any issue because that the responsibility of the user who configures it.<br>
This could help for many things like using a different alias for a service that we deploy like <code>mesg-core service deploy --alias xxx ...</code></p>
<p>It’s not really sexy interface when you have to go really nested but that might be really flexible</p>
          <p><a href="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/2</link>
        <pubDate>Tue, 27 Nov 2018 05:31:30 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-124-2</guid>
        <source url="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124.rss">Configuring Services with Deploy-Time or Run-Time Arguments</source>
      </item>
      <item>
        <title>Configuring Services with Deploy-Time or Run-Time Arguments</title>
        <dc:creator><![CDATA[ilgooz]]></dc:creator>
        <description><![CDATA[
            <p>There are two types of configurations related to configuring services.</p>
<p>1- Configuring service tasks/events, it’s public ports, data volumes etc. from the <em>mesg.yml</em>. (we have this feature).</p>
<p>2- Configuring service’s program with its own runtime cli flags. (we do this within the <em>Dockerfile</em> of service while running it.)</p>
<p>Currently, these two types of configurations can be only done by changing the source code of services. And we don’t support ability of somehow setting cli flags of service’s program within the <em>mesg.yml</em> file. Since <em>mesg.yml</em> is the place where we describe and configure services, I think, we should also support configuring runtime of service’s program inside of it too.</p>
<p>Purpose if this proposal is to discuss both to support configuring services dynamically without changing their source code by using some kind of runtime or build-time arguments for MESG services. If we have this feature, as a second, we can support providing configurations to runtime of service’s program, this way program can be dynamically configured as well.</p>
<p><em>Real world case about why this is needed:</em></p>
<p>As a user, let’s say that I have a workflow file and I want to use <a href="https://github.com/ilgooz/service-http-server" rel="nofollow noopener">service-http-server</a> for serving a <em>vuejs app</em> and a <em>rest api</em> but from different ports. To do that, <em>service-http-server</em> should be configurable to set a port address without a need of changing its source code because, I don’t want to fork it and create two different branches to setup different ports. I want to have the full power of reusable services by passing configurations dynamically.</p>
<p>So, for this case, I need to be able to both configure <a href="https://github.com/ilgooz/service-http-server/blob/1cc53b0/mesg.yml#L61" rel="nofollow noopener">this part in the yml</a> file and <a href="https://github.com/ilgooz/service-http-server/blob/975b713/Dockerfile#L5" rel="nofollow noopener">this flag in the Dockerfile</a> dynamically.</p>
<p><em>Check the sample mesg.yml and Dockerfile below for see this proposal in actual code:</em><br>
<em>- Note that, to configure service’s program dynamically from the mesg.yml, I followed the pattern of using build args of Docker. Every arg provided while deploying/starting MESG services also directly mapped to Docker’s build time args</em></p>
<p><em>command:</em></p>
<pre><code class="lang-auto">$ mesg-core service deploy --arg serverAddr=2300 https://github.com/ilgooz/service-http-server
// outputs a SERVICE_ID

// or

$ mesg-core service start --arg serverAddr=2300 SERVICE_ID
// outputs an ANOTHER_SERVICE_ID
</code></pre>
<p><em>mesg.yml:</em></p>
<pre><code class="lang-auto">...
name: ...
description: ...
env:
  # we can also support env vars that will be accessed by service's program on runtime
  # as next to configuring service's program with Docker's build time args.
  AN_ENV_VAR: 123
configuration:
  ports:
    - $serverAddr
...
</code></pre>
<p><em>Dockerfile:</em></p>
<pre><code class="lang-auto">CMD website --serverAddr $serverAddr
</code></pre>
<p>We discussed on Discord and kinda agreed on providing runtime arguments to MESG services with the <em>service start/deploy</em> command and they can be accessed with <em>$</em> sign in the <em>yml</em> file. Every argument should be also mapped to Docker’s build time arguments. But of course, every change on args <strong>must</strong> cause service to get a <strong>different service id</strong>.</p>
<p>By having this configuration features, we can also support giving configurations for services in the workflow files easily like this:<br>
<em>sample workflow.yml</em>:</p>
<pre><code class="lang-auto">...
services:
  website:
    id: https://github.com/ilgooz/service-http-server/
    args:
      serverAddr: 2300

  restapi:
    repo: https://github.com/ilgooz/service-http-server/
    args:
      serverAddr: 3300

when:
  ...
</code></pre>
          <p><a href="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124/1</link>
        <pubDate>Tue, 20 Nov 2018 10:25:31 +0000</pubDate>
        <guid isPermaLink="false">forum.mesg.com-post-124-1</guid>
        <source url="https://forum.mesg.com/t/configuring-services-with-deploy-time-or-run-time-arguments/124.rss">Configuring Services with Deploy-Time or Run-Time Arguments</source>
      </item>
  </channel>
</rss>
